swagger: "2.0"
info:
  description: "APIs design for Flashcard server app"
  version: "1.0.0"
  title: "Swagger Flashcard server"
host: "127.0.0.1"
basePath: "/v1"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /collection:
    put:
      tags:
      - "collection"
      summary: "Update collection"
      operationId: "updateCollection"
      parameters:
      - in: "body"
        name: "body"
        description: "Collection to update"
        required: true
        schema:
          $ref: "#/definitions/CollectionItem"
      responses:
        "400":
          description: "Invalid ID Collection"
        "404":
          description: "Collection not found"
        "405":
          description: "Validation exception"

  /collection/{collectionId}:
    get:
      tags:
      - "collection"
      summary: "Find collection by id"
      description: "Returns a single collection"
      operationId: "getCollectionById"
      parameters:
      - name: "collectionId"
        in: "path"
        description: "Id of collection to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Card"
        "400":
          description: "Invalid ID Collection"
        "404":
          description: "Collection not found"
    post:
      tags:
      - "collection"
      summary: "Add new collection"
      description: ""
      operationId: "addCollection"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "collectionId"
        in: "path"
        description: "Collection needs to be update"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        required: false
        type: "string"
      - name: "author"
        in: "formData"
        required: false
        type: "string"
      - name: "desc_txt"
        in: "formData"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "collection"
      summary: "Delete collection"
      operationId: "deleteCollection"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "collectionId"
        in: "path"
        description: "Collection id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid Collection io"
        "404":
          description: "Collection not found"

  /collection/findByType:
    get:
      tags:
      - "card"
      summary: "Finds card by type"
      description: "Get card by type, data can be provided with comma seperated strings"
      operationId: "findCollectionsByType"
      parameters:
      - name: "type"
        in: "query"
        description: "Type values that need to be considered for fillter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "home"
          - "trend"
          - "japanese"
          default: "home"
        collectionFormat: "multi"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CollectionItem"

  /card/{page}/{limit}:
    get:
      tags:
      - "cardList"
      summary: "Find flashcard by page"
      description: "Returns flashcard list by page"
      operationId: "getFlashcardAtPage"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "page"
        in: "path"
        description: "Get flashcard in page"
        required: true
        type: "integer"
        format: "int32"
      - name: "limit"
        in: "path"
        description: "Limit item in page"
        required: true
        type: "integer"
        format: "int32"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Card"
        "400":
          description: "Invalid parameters"
        "404":
          description: "not found"
  /card:
    post:
      tags:
      - "card"
      summary: "Add card to database"
      operationId: "addCard"
      parameters:
      - in: "body"
        name: "body"
        description: "Card object needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Card"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
        - "card"
      summary: "Update existing card"
      operationId: "updateCard"
      parameters:
      - in: "body"
        name: "body"
        description: "Update existing card object"
        required: true
        schema:
          $ref: "#/definitions/Card"
      responses:
        "400":
          description: "Invalid ID"
        "404":
          description: "Card not found"
        "405":
          description: "Validation exception"

# ========================== 
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  CollectionItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      desc_txt:
        type: "string"
      author:
        type: "string"
      image:
        type: "string"

  Card:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      back:
        type: "string"
      back_image: 
        type: "string"
      back_lang:
        type: "string"
      collection_id:
        type: "integer"
        format: "int64"
      desc_txt:
        type: "string"
      front:
        type: "string"
      front_image:
        type: "string"
      front_lang:
        type: "string"